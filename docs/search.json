[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Workshop for Bioscience",
    "section": "",
    "text": "Welcome\n\nWelcome to the R workshop for Bioscience!\nThe workshop is intended for any Bioscience researchers with limited prior experience in R who is interested in learning how to use R to do data wrangling, data visualization, common statistical analyses.\nWorkshop materials in the github repository Rworkshop\n\n\n\nLearning objectives\nAt the end of the class, students will be able to:\n\nnavigate R and R studio interface\nset up project and coding environment for data analysis\nefficiently handle datasets\nperform common data visualizations used in Bioscience\nconduct descriptive analysis in R\nconduct regression analysis in R\n\n\n\nSchedule\n\n\n\nTime\nTopic\n\n\n\n\n9:00 - 9:10\nIntroduction\n\n\n9:10 - 9:45\nSession 1: Get Started with R\n\n\n9:45 - 10:00\nQuestions + Coffee break\n\n\n10:00 - 10:45\nSession 2: Data Visualization in R\n\n\n10:45 - 11:00\nQuestions + Coffee break\n\n\n11:00 - 11:45\nSession 3: Statistical Analysis in R\n\n\n11:45 - 12:00\nConclusions and Questions\n\n\n\n\n\nIn preparation for the workshop\nParticipants are required to follow the next steps before the day of the workshop:\n\nInstall R and R Studio\n\nWindows operating system\n\ninstall R, https://cran.r-project.org/bin/windows/base/\ninstall RStudio, https://posit.co/download/rstudio-desktop/#download\n\nmacOS operating system\n\ninstall R, https://cran.r-project.org/bin/macosx/\ninstall RStudio, https://posit.co/download/rstudio-desktop/#download\n\n\nVerify access to the course page, https://kuan-liu.github.io/Rworkshop/\nClone or download the workshop repository: https://github.com/Kuan-Liu/Rworkshop\n\n\n\n\n\n\nReference and resource\n\nR for Data Science by Hadley Wickham & Garrett Grolemund\nggplot2: elegant graphics for data analysis by Hadley Wickham\n\n\n\n\n\n\n\n\nR for Data Science\nggplot2: elegant graphics for data analysis\n\n\n\n\n\n\n\n\n\n\n\nAbout me\n\nI am an Assistant Professor in Biostatistics and Health Services Research at the University of Toronto\nMy primary research focuses on developing methodology for statistical inference with complex longitudinal data in comparative effectiveness research\n\ncausal inference\nBayesian statistics\nlongitudinal data analysis\njoint modelling\nbias analysis\n\nMy ties to forestry and ecology 🌲"
  },
  {
    "objectID": "session1.html",
    "href": "session1.html",
    "title": "1. Getting started with R",
    "section": "",
    "text": "Learning Objectives\n\n\n\n\nlearn about R and RStudio work environment\nunderstand objects in R\nuse R as a calculator\nimport and export data files\ndata wrangling\nlearn about simple iterative programming in R"
  },
  {
    "objectID": "session1.html#r-and-rstudio",
    "href": "session1.html#r-and-rstudio",
    "title": "1. Getting started with R",
    "section": "1.1 R and RStudio",
    "text": "1.1 R and RStudio\n\nR is a language and environment for statistical computing and graphics (https://cran.r-project.org/manuals.html).\nMany users of R like to use RStudio as the preferred interface for programming in R.\nRStudio is an Integrated Development Environment (IDE) for R.\n\neasy to navigate\nlots of point and click features and customizations\nRstudio is not just for R\n\n\n\n\nRStudio layout\nWhen you open RStudio, your interface is made up of four panes as shown below. These can be organised via menu options View > Panes >\n\n\n\nRStudio layout\n\n\n\n\nR Packages\n\nPackages are the fundamental units of reproducible R code.\nThey include reusable R functions, the documentation that describes how to use them, and sample data.\nWe install the package using install.packages() function or we can use the Package tab in Rstudio.\nOnce we have the package installed, we must load the functions from this library so we can use them within R.\n\n\n# install.packages(tidyverse, dependencies = T)\n  library(tidyverse) # load package library\n\n\n\nR script\n\nWe can run code in the console at the prompt where R will evaluate it and print the results.\nbest practice write code in a new script file so it can be saved, edited, and reproduced.\nTo open a new script, we select File > New File > R Script.\nTo “run code” that was written in the script file, you can highlight the code lines you wish be evaluated and\n\npress CTRL-Enter (windows)\nCmd+Return (Mac).\n\nAdditionally, You can comment or uncomment script lines by pressing\n\nCtrl+Shift+C (windows)\nCmd+Shift+C (Mac).\n\nThe comment operator in R is #.\nYou can find more RStudio default keyboard shortcuts here.\n\n\n\nCustomization\n\nYou can customize your RStudio session under the Options dialog Tools > Global Options menu (or RStudio > Preferences on a Mac).\nA list of customization categories can be found here.\n\n\n\n\nWorking directory\n\nThe working directory is the default location where R will look for files you want to load and where it will put any files you save.\nYou can use function getwd() to display your current working directory\nand use function setwd() to set your working directory to a new folder on your computer.\n\n\n\ngetwd() #show my current working directory;\n\n[1] \"D:/GitHub/Rworkshop\"\n\n\n\n\nGetting help with R\n\nThe help section of R is extremely useful if you need more information about the packages and functions that you are currently loaded.\nYou can initiate R help using the help function help() or ?, the help operator.\n\n\nhelp(ggplot)"
  },
  {
    "objectID": "session1.html#basic-r",
    "href": "session1.html#basic-r",
    "title": "1. Getting started with R",
    "section": "1.2 Basic R",
    "text": "1.2 Basic R\n\nIn this subsection, I will briefly outline some common R functions and commands for arithmetic, creating and working with objects such as vector and matrix\n\n\n\n\n\n\n\n\nR is case sensitive.\nCommands are separated by a newline in the console.\nThe # character can be used to make comments. R does not execute the rest of the line after the # symbol - it ignores it.\nPrevious commands can be accessed via the up and down arrow keys on the keyboard.\nWhen naming in R, avoid using spaces and special characters (i.e., !@#$%^&*()_+=;:’“<>?/) and avoid leading names with numbers.\n\n\n\n\n\nArithmetic\n\n2*3\n2^3\n2 + (2 + 3) * 2 - 5\n\nlog(3)\nexp(3)\nlog(exp(1)) #playing with Euler's number;\nsqrt(x)\n\n\nSome of the other available useful functions are: abs(), sqrt(), ceiling(), floor(), trunc(), round() .\n\n\n\nCreating Scalars\n\n# Creating a scalar called \"a\" and assigning a value of 2\na=2\n\n# Creating a scalar called \"b\" and assigning a value of 3\nb=3\n\n# Adding \"a\" and \"b\" and saving under \"d\"\nd=a+b\n\n# Printing the vaue of \"d\"\nd\n\n[1] 5\n\n# Updating the value of a scalar\n# Adds 5 to the old value of \"a\" and saves it again under the name \"a\".\n# Old value=2, New value = 7\na=a+5 \na\n\n[1] 7\n\n# Computation using scalar objects\n\n(a-b)^3 + log(d)\n\n[1] 65.60944\n\n\n\n\nLogic check\n\nx=4   # assigning 4 to x\n\n\nx<5   # checks if x is less than 5 or not\n\n[1] TRUE\n\nx>5   # checks if x is greater than 5 or not\n\n[1] FALSE\n\nx<=5  # less or equal\n\n[1] TRUE\n\nx>=5  # greater or equal\n\n[1] FALSE\n\nx==4   #( == stands for euqal)\n\n[1] TRUE\n\nx!=4   #( != stands for not equal)\n\n[1] FALSE\n\n\n\n\nif and else-if\nIf statements in R has got this following structure\n\n# if(condition to check){things to do if the condition is true}\n\nA simple example:\n\nx=3\n\nif(x==3){print(\"x is 3\")}\n\n[1] \"x is 3\"\n\nx=4\n\nif(x==3){print(\"x is 3\")}   # this will print nothing\n\nelse-if statements in R has got this following structure\n\n# if(condition A){\n#\n# things to do if condition A is true\n#\n# }elseif(condition B){\n#\n# things to do if condition A is false and condition B is true\n#\n# }else{ \n#\n# things to do if both conditions are false\n#\n# }\n\n\nx        # current value of x\n\n[1] 4\n\nif(x==3){\n  \n  print(\"x is 3\")\n  \n}else if(x>3){\n  \n  print(\"x is greater than 3\")\n  \n}else{\n    print(\"x is less than 3\")\n  }\n\n[1] \"x is greater than 3\"\n\n\n\n\nVectors\nOperator <- is called the assignment operation, we can create a vector (numeric, characteristic, or mixture) using the assignment operation and the c() function.\n\n# a vector of a single element;\nx <- 3\nx\n\n# a character vector\nx <- c(\"red\", \"green\", \"yellow\")\nx\nlength(x)\nnchar(x) #number of characters for each element;\n\n# encode a vector as a factor (or category);\ny <- factor(c(\"red\", \"green\", \"yellow\", \"red\", \"red\", \"green\"))\ny\nclass(y)\nas.numeric(y) # we can return factors with numeric labels;\n\n# we can also label numeric vector with factor levels;\nz <- factor(c(1,2,3,1,1,2), levels = c(1,2,3), labels = c(\"red\", \"green\",\"yellow\"))\nz\nclass(z)\nmode(z)\n\n#we can use this to create dummy variables for regression;\ncontrasts(z) \n\n# using the repeat command\n# the following line repeats 3, 10 times\nx=rep(3,5)   \nx\n\n\n# a numeric vector;\nx <- c(10.4, 5.6, 3.1, 6.4, 21.7, 53.5, 3.6, 2.6, 6.1, 1.7)\nx\nlength(x) #return number of elements;\n\n# a numeric vector composed of all integers between 1 and 10;\ny <- 1:10\ny\n\n# a numeric vector composed of all even number integers between 0 and 10;\nz <- seq(0,10, by=2)\nz\n\n\n# simple vector based calculations;\nx + y\nx*y\nx/y\n\n# matrix in R;\nmatrix(1:16, nrow=4)\nmatrix(1:16, nrow=4, byrow=TRUE)\nmatrix(1:16, nrow=4)\ndiag(matrix(1:16, nrow=4))\ndiag(c(1,-3,7))\ndiag(3)\n\n# matrix calculation;\nX <- matrix(1:16, nrow=4, byrow=T)\nX\nt(X) #transpose;\n\nY <- matrix(seq(1,32, by=2), nrow=4, byrow=T)\nY\n\nY + X\nY - X\n\n3 * X\nX * Y\nX %*% Y #inner product;\n\n## Logical check for a vector\n\n#Just like a scalar, we can evaluate logical conditions using a vector as well. This is an _element-wise_ operation. Which means R will check every element of that vector to see if the condition is met or not. The output will be a TRUE/FALSE vector.\n\n\n#Let's star with a new vector which has 5 elements\nx= c(3,6,2,8,10)\nx\n\n# Checking every element to see if it's greater than 5\n# The output will be a TRUE/FALSE vector\n# TRUE if the element is >5, FALSE otherwise.\nx>5   \n\n#Checking every element if it's equal to 2\nx==2\n\n## Counting number of elements that satisfy a certain condition\n\n#Logical checks produces TRUE/FALSE vectors. In the background which is 1 and 0. If we use sum( ) function on this TRUE/FALSE vector we get the total number elements which resulted in a \"TRUE\" .\n\n\n# using the same x vector\nx= c(3,6,2,8,10)\n\n \nsum(x>5)\n\n#count of elements in x that are less or equal to 8\nsum(x<=8)\n\n\n\n## Subsetting a vector\n\n# To pick elements from a vector we use the open bracket [ ] after the name of the vector and write which elements we want out of it.\n\n\n#Starting with same x vector\nx= c(3,6,2,8,10)\n\nx[1]          # gives us the first element of x\nx[ c(1,3,4) ]   # gives us the 1st, 3rd and 4th element\n\nx[-1]         \n\n\nx[-1:-2]\n\nx[-c(1,2)]\n\n\n\nCalculating summary statistics\n\nr=c(1:100)\nmean(r)  #calculate the mean of a vector\n\n[1] 50.5\n\nvar(r)   #variance of a vector\n\n[1] 841.6667\n\nsd(r)    #standard deviation of a vector\n\n[1] 29.01149\n\nmin(r)   #minimum of a vector\n\n[1] 1\n\nmax(r)   #maximum of a vector\n\n[1] 100\n\nmedian(r)#median\n\n[1] 50.5\n\nrange(r) #range\n\n[1]   1 100"
  }
]